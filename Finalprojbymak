import java.io.*;
import java.util.*;

// Enum for different tree species
enum TreeSpecies {
    BIRCH, MAPLE, FIR
}

// Class representing a tree
class Tree implements Serializable {
    // Instance variables
    private TreeSpecies species;
    private int plantingYear;
    private double height;
    private double growthRate;

    // Constructor
    public Tree(TreeSpecies species, int plantingYear, double height, double growthRate) {
        this.species = species;
        this.plantingYear = plantingYear;
        this.height = height;
        this.growthRate = growthRate;
    }

    // Getters for instance variables
    public TreeSpecies getSpecies() {
        return species;
    }

    public int getPlantingYear() {
        return plantingYear;
    }

    public double getHeight() {
        return height;
    }

    public double getGrowthRate() {
        return growthRate;
    }

    // Method to simulate growth of the tree
    public void grow() {
        height *= (1 + growthRate / 100);
    }

    // Method to represent tree object as a string
    @Override
    public String toString() {
        return String.format("%d %s   %d  %.1f'  %.1f%%", plantingYear, species, (int) height, growthRate);
    }
}

// Class representing a forest
class Forest implements Serializable {
    // Instance variables
    private String name;
    private ArrayList<Tree> trees;

    // Constructor
    public Forest(String name) {
        this.name = name;
        this.trees = new ArrayList<>();
    }

    // Method to add a tree to the forest
    public void addTree(Tree tree) {
        trees.add(tree);
    }

    // Method to remove a tree from the forest
    public void removeTree(int index) {
        if (index >= 0 && index < trees.size()) {
            trees.remove(index);
        }
    }

    // Method to simulate growth of trees in the forest
    public void growTrees() {
        for (Tree tree : trees) {
            tree.grow();
        }
    }

    // Method to remove trees from the forest based on a height threshold
    public void reapTrees(double heightThreshold) {
        Iterator<Tree> iterator = trees.iterator();
        while (iterator.hasNext()) {
            Tree tree = iterator.next();
            if (tree.getHeight() > heightThreshold) {
                iterator.remove();
                Random random = new Random();
                int plantingYear = Calendar.getInstance().get(Calendar.YEAR) - random.nextInt(10);
                Tree newTree = new Tree(TreeSpecies.values()[random.nextInt(TreeSpecies.values().length)],
                        plantingYear, random.nextDouble() * 10 + 10, random.nextDouble() * 10 + 10);
                trees.add(trees.indexOf(tree), newTree);
                System.out.println("Reaping the tall tree  " + tree + " Replaced with new tree " + newTree);
            }
        }
    }

    // Method to print the forest details
    public void printForest() {
        System.out.println("Forest name: " + name);
        for (int i = 0; i < trees.size(); i++) {
            System.out.println(" " + i + " " + trees.get(i));
        }
        System.out.println("There are " + trees.size() + " trees, with an average height of " + calculateAverageHeight());
    }

    // Method to calculate the average height of trees in the forest
    private double calculateAverageHeight() {
        double totalHeight = 0;
        for (Tree tree : trees) {
            totalHeight += tree.getHeight();
        }
        return trees.isEmpty() ? 0 : totalHeight / trees.size();
    }
}

// Class representing a forest simulation
class ForestSimulation {
    // Scanner object for user input
    private static Scanner keyboard = new Scanner(System.in);

    // Main method to start the forest simulation
    public static void main(String[] args) {
        ArrayList<Forest> forests = new ArrayList<>();
        // Load forests from CSV files
        for (String forestName : args) {
            Forest forest = loadForest(forestName);
            if (forest != null) {
                forests.add(forest);
            }
        }
        // Start simulation for each forest
        for (Forest forest : forests) {
            simulateForest(forest);
        }
        keyboard.close();
    }

    // Method to simulate operations on a forest
    private static void simulateForest(Forest forest) {
        char choice;
        do {
            System.out.println("----------------------------------");
            System.out.println("Initializing from " + forest);
            System.out.print("(P)rint, (A)dd, (C)ut, (G)row, (R)eap, (S)ave, (L)oad, (N)ext, e(X)it : ");
            choice = keyboard.next().charAt(0);
            keyboard.nextLine(); // Consume newline character
            switch (Character.toUpperCase(choice)) {
                case 'P':
                    forest.printForest();
                    break;
                case 'A':
                    // Add a new randomly generated tree
                    addRandomTree(forest);
                    break;
                case 'C':
                    // Cut down a tree by index
                    cutDownTree(forest);
                    break;
                case 'G':
                    // Simulate a year's growth
                    forest.growTrees();
                    break;
                case 'R':
                    // Reap the forest of trees over a specified height
                    reapForest(forest);
                    break;
                case 'S':
                    // Save the forest (serialized) to a .db file
                    saveForest(forest);
                    break;
                case 'L':
                    // Load a different named forest from its .db file
                    // (Not implemented in this version)
                    System.out.println("Feature not implemented.");
                    break;
                case 'N':
                    // Move on to the next forest
                    return;
                case 'X':
                    // Exit the program
                    return;
                default:
                    System.out.println("Invalid menu option, try again");
            }
        } while (Character.toUpperCase(choice) != 'X');
    }

    // Method to add a randomly generated tree to the forest
    private static void addRandomTree(Forest forest) {
        Random random = new Random();
        int plantingYear = Calendar.getInstance().get(Calendar.YEAR) - random.nextInt(10);
        TreeSpecies species = TreeSpecies.values()[random.nextInt(TreeSpecies.values().length)];
        double height = random.nextDouble() * 10 + 10; // Random height between 10 and 20
        double growthRate = random.nextDouble() * 10 + 10; // Random growth rate between 10 and 20
        Tree newTree = new Tree(species, plantingYear, height, growthRate);
        forest.addTree(newTree);
        System.out.println("Added new tree: " + newTree);
    }

    // Method to cut down a tree from the forest
    private static void cutDownTree(Forest forest) {
        System.out.print("Tree number to cut down: ");
        if (keyboard.hasNextInt()) {
            int index = keyboard.nextInt();
            keyboard.nextLine(); // Consume newline character
            if (index >= 0 && index < forest.size()) {
                forest.removeTree(index);
            } else {
                System.out.println("Tree number " + index + " does not exist");
            }
        } else {
            System.out.println("That is not an integer");
            keyboard.nextLine(); // Consume invalid input
        }
    }

    // Method to reap trees from the forest based on a height threshold
    private static void reapForest(Forest forest) {
        System.out.print("Height to reap from: ");
        if (keyboard.hasNextDouble()) {
            double height = keyboard.nextDouble();
            keyboard.nextLine(); // Consume newline character
            forest.reapTrees(height);
        } else {
            System.out.println("That is not a number");
            keyboard.nextLine(); // Consume invalid input
        }
    }

    // Method to save the forest to a file
    private static void saveForest(Forest forest) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(forest.getName() + ".db"))) {
            oos.writeObject(forest);
            System.out.println("Forest saved successfully.");
        } catch (IOException e) {
            System.out.println("Error occurred while saving the forest: " + e.getMessage());
        }
    }

    // Method to load a forest from a file
    private static Forest loadForest(String forestName) {
        Forest forest = null;
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(forestName + ".csv"))) {
            forest = (Forest) ois.readObject();
            System.out.println("Forest loaded successfully: " + forestName);
        } catch (FileNotFoundException e) {
            System.out.println("Error: CSV file not found for forest: " + forestName);
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error occurred while loading forest " + forestName + ": " + e.getMessage());
        }
        return forest;
    }
}
